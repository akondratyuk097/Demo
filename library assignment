############# in cpp file
#include "mathfunctions.h"
#include <math.h>

double meanX (int x[], int s) {
  // mean of x values
    int sumx = 0;
    for (int i = 0; i < s; i++) {
        sumx += x[i];
    }
    return (double)sumx / s;
}

double meanY (int y[], int s) {
  // mean of y values
    int sumy = 0;
    for (int j = 0; j < s; j++) {
        sumy += y[j];
    }
    return (double)sumy / s;
}

double standardDeviationY(double meanY, int y[], int s){
// standard deviation for y samples 
    int sumDevY=0;
    double productdevY=0; 
    for (int z=0; z<s; z++){
      sumDevY+= y[z]; 
      productdevY+= pow(y[z] - meanY, 2);
    }
    double ansY= sqrt((productdevY/(s-1)));
    return ansY;
}

double standardDeviationX(double meanX, int x[], int s){
// standard deviation for x samples
    int sumDevX=0;
    double productdevX=0; 
    for (int z=0; z<s; z++){
      sumDevX+= x[z]; 
      productdevX+= pow(x[z] - meanX, 2);
    }
    double ansX= sqrt((productdevX/(s-1)));
    return ansX;

}

int medianX (int x[],int s){
  // median for x-values 
    for (int i=0; i < s-1; i++) {
    for (int j=i+1; j<s; j++) {
      if (x[i] > x[j]) {
        // Swap elements if they are out of order
        int temp = x[i];
        x[i] = x[j];
        x[j] = temp;
        // temp values never get deleted 
      }
    }
  }
  if(s%2==0){ 
// if the sample number of units is even then it will perform the following function: 
    int evenx= x[(((s/2)+((s/2)+1))/2)];
    return evenx;

  }else {
// otherwise the sample number is odd and will perform the following: 
    int oddx= x[((s+1)/2)];
    return oddx;
  }  

}

int medianY (int y[], int s){
 for (int i=0; i < s-1; i++) {
    for (int j=i+1; j<s; j++) {
      if (y[i] > y[j]) {
        // Swap elements if they are out of order
        int temp = y[i];
        y[i] = y[j];
        y[j] = temp;
      }
    }
  }
  if(s%2==0){
// if the sample number of units is even then it will perform the following function:
    int eveny= y[(((s/2)+((s/2)+1))/2)];
    return eveny;

  }else {
// otherwise the sample number is odd and will perform the following:
    int oddy= y[((s+1)/2)];
    return oddy;
  }  

}

double PC (int y[], int x[], double meanpcX, double meanpcY, int s){
  double numX=0;
// represents (x-avgX)
  double numY=0;
// represents (y-avgY)
  double powerX=0;
// represents (x-avgX)^2
  double powerY=0; 
// represents (y-avgY)^2
  double productXY=0; 
// represents (x-avgX)*(y-avgY)
  for (int z=0; z<s; z++){
    numX+= x[z]- meanpcX;
    powerX+= pow(numX, 2);
    numY+= y[z]- meanpcY;
    powerY+= pow(numY, 2);
    productXY+= (numX)*(numY); 
  }
  double numTotal= productXY; 
// calculates all the numerator values of Pearson coefficient 
  double denomTotal=sqrt(powerX*powerY);  
// calculates all the denominator values of Pearson coefficinet 
  double r=numTotal / denomTotal;
// finds the pearsons coefficient     
  return r; 
// Pearson coefficient value is returned to the function

}
double t_value(int s, int c, double stdDevX, double stdDevY, double meanX, double meanY){
  // calculates the t-value from the variables of other functions 
    double ans = (meanX - meanY) / sqrt((pow(stdDevX, 2) / s) + (pow(stdDevY, 2) / c));
    return ans;
}


################ in .h file 
#ifndef mathfunctions_h 
#define mathfunctions_h 
#include <Arduino.h>
#include <math.h>

double meanX(int x[], int s);
// mean of x values
double meanY(int y[], int s);
// mean of y values 
double standardDeviationX(double meanX, int x[], int s);
// standard deviation of x values
double standardDeviationY(double meanY, int y[], int s);
// standard deviation of y values 
int medianX(int x[], int s);
// median for x-values 
int medianY(int y[], int s);
// median for y-values
double PC(int y[], int x[], double meanpcX, double meanpcY, int s);
// Pearson coefficient for both x and y values 
double t_value(int s, int c, double stdDevX, double stdDevY, double meanX, double meanY);
// t-value of t-test


#endif


################ in ino file


#include "mathfunctions.h"


void setup(){

Serial.begin (9600); // put your setup code here, to run once:
while (!Serial);
int x []= {263, 153, 722, 779, 480, 168, 232, 966, 206, 739, 621, 941, 453, 785, 348, 293, 390, 966, 479, 602, 397, 827, 542, 8, 550, 223, 159, 732, 294, 379, 561, 437, 610, 144, 795, 80, 674, 980, 442, 134, 123, 591, 180, 576, 766, 351, 639, 967, 655, 471, 920, 234, 294, 625, 309, 750, 957, 836, 873, 574, 54, 250, 419, 140, 136, 212, 592, 833, 610, 479, 419, 795, 135, 809, 717, 409, 947, 134, 516, 969, 206, 944, 723, 45, 577, 326, 329, 254, 382, 455, 323, 678, 31, 280, 690, 157, 745, 316, 323, 161, 807, 52, 26, 908, 532, 171, 920, 860, 148, 831, 681, 524, 247, 154, 237, 405, 498, 771, 78, 567, 111, 457, 873, 119, 225, 630, 320, 203, 322, 14, 943, 137, 91, 510, 110, 687, 538, 106, 723, 797, 618, 453, 328, 848, 745, 573, 438, 120, 161, 266, 627, 50, 919, 127, 388, 213, 653, 900, 104, 605, 23, 682, 220, 907, 142, 400, 555, 660, 90, 416, 912, 235, 450, 627, 734, 791, 378, 866, 659, 120, 715, 75, 112, 124, 151, 836, 232, 38, 655, 90, 188, 183, 419, 266, 29, 260, 655, 702, 53, 24, 35, 100, 293, 505, 760, 895, 495, 465, 274, 858, 53, 873, 934, 110, 671, 196, 714, 213, 10, 807, 959, 955, 589, 299, 530, 597, 987, 435, 667, 943, 876, 125, 942, 962, 225, 33, 403, 723, 657, 155, 397, 216, 257, 596, 329, 974, 68, 32, 691, 405, 630, 546, 934, 701, 300, 780, 64, 216, 349, 897, 4, 989, 712, 285, 73, 502, 556, 972, 783, 547, 717, 113, 570, 277, 506, 376, 379, 318, 41, 217, 686, 640, 343, 268, 924, 690, 77, 558, 360, 64, 424, 740, 969, 705, 978, 51, 311, 829, 791, 802, 227, 782, 204, 395, 571, 793, 305, 568, 906, 252, 467, 648, 862, 307, 264, 613, 815, 689, 657, 236, 392, 667, 255, 563, 410, 598, 46, 651, 27, 987, 217, 678, 300, 619, 660, 880, 586, 21, 843, 109, 623, 418, 770, 924, 173, 819, 938, 471, 12, 431, 264, 844, 733, 85, 899, 825, 347, 848, 251, 278, 3, 419, 345, 249, 179, 758, 784, 513, 471, 471, 306, 744, 297, 372, 325, 331, 462, 722, 932, 73, 801, 14, 554, 907, 922, 974, 163, 191, 933, 585, 446, 189, 716, 596, 29, 923, 948, 927, 474, 517, 466, 948, 555, 824, 514, 459, 950, 473, 963, 854, 517, 842, 917, 876, 609, 22, 78, 684, 733, 708, 912, 404, 297, 538, 646, 521, 900, 732, 438, 308, 688, 958, 905, 289, 529, 393, 976, 839, 676, 396, 560, 112, 420, 514, 355, 591, 401, 539, 306, 70, 976, 693, 963, 35, 528, 961, 25, 859, 207, 447, 216, 727, 117, 292, 714, 56, 537, 909, 130, 611, 296, 732, 23, 230, 440, 366, 572, 126, 164, 165, 657, 307, 755, 758, 53, 730, 222, 664, 944, 551, 622, 955, 510, 631, 199, 707, 891, 0, 361, 635, 800, 506, 132, 868, 38, 66, 768, 806, 868, 524, 863, 493, 242, 431, 243, 838, 867, 661, 309, 172, 712, 762, 200, 113, 828, 509, 232, 932, 988, 66, 982, 827, 483, 422, 394, 76, 60, 415, 825, 628, 384, 856, 815, 15, 714, 594, 793, 98, 404, 291, 399, 787, 394, 336, 854, 941, 857, 398, 465, 499, 429, 575, 648, 887, 460, 68, 6, 387, 365, 154, 628, 262, 566, 209, 762, 716, 621, 97, 101, 572, 514, 181, 782, 47, 823, 535, 238, 255, 648, 10, 57, 439, 968, 511, 167, 116, 948, 24, 640, 749, 437, 658, 631, 386, 706, 308, 90, 260, 294, 562, 696, 538, 411, 928, 46, 747, 402, 988, 937, 467, 598, 924, 290, 223, 979, 229, 644, 491, 954, 961, 976, 538, 625, 153, 507, 913, 751, 294, 69, 413, 53, 164, 415, 306, 298, 134, 471, 922, 853, 179, 825, 55, 717, 736, 465, 219, 850, 153, 978, 592, 599, 442, 340, 156, 146, 570, 983, 862, 58, 45, 216, 977, 839, 505, 41, 557, 142, 282, 838, 351, 645, 224, 696, 675, 82, 144, 490, 787, 527, 675, 342, 58, 987, 437, 289, 55, 437, 967, 203, 883, 278, 453, 565, 975, 139, 759, 493, 275, 37, 389, 300, 318, 878, 778, 573, 534, 751, 60, 902, 633, 515, 692, 219, 695, 799, 950, 874, 169, 682, 110, 237, 840, 687, 205, 553, 368, 380, 583, 74, 460, 879, 36, 306, 60, 285, 76, 428, 497, 438, 626, 525, 52, 914, 466, 196, 925, 114, 613, 185, 975, 929, 619, 603, 99, 12, 297, 359, 226, 303, 468, 815, 447, 593, 638, 519, 314, 555, 300, 26, 544, 70, 340, 859, 482, 695, 51, 404, 114, 973, 306, 323, 845, 953, 297, 301, 308, 421, 172, 711, 476, 43, 369, 814, 470, 692, 132, 725, 142, 686, 373, 287, 174, 378, 131, 629, 73, 717, 47, 493, 20, 493, 169, 547, 871, 389, 5, 15, 759, 538, 339, 392, 41, 960, 940, 25, 471, 660, 574, 274, 27, 608, 433, 186, 794, 483, 856, 817, 988, 624, 406, 683, 670, 569, 825, 52, 756, 169, 243, 39, 63, 914, 299, 684, 692, 763, 183, 641, 149, 937, 269, 826, 542, 3, 254, 778, 559, 745, 50, 902, 407, 876, 742, 93, 298, 600, 955, 275, 397, 489, 139, 986, 259, 588, 556, 713, 234, 658, 338, 986, 373, 592, 11, 929, 920, 846, 498, 633, 147, 307, 341, 618, 668, 56, 842, 857, 595, 714, 934, 377, 233, 838, 497, 580, 788, 534, 265, 131, 757, 167, 142, 15, 570, 135, 225, 724, 211, 296, 363, 860, 188, 694, 799, 275, 263, 727, 880, 560, 798, 
98, 730, 986, 251, 343, 806, 548, 593, 41, 402, 694, 691, 192, 328, 391, 909, 78, 131, 584, 873, 278, 156, 593, 438, 264};
// array for x-values
int y []= {933, 743, 262, 529, 700, 508, 752, 256, 256, 119, 711, 351, 843, 705, 108, 393, 330, 366, 169, 932, 917, 847, 972, 868, 980, 223, 549, 592, 164, 169, 551, 427, 190, 624, 635, 920, 944, 310, 862, 484, 363, 301, 710, 236, 876, 431, 929, 397, 675, 491, 190, 344, 134, 425, 629, 30, 727, 126, 743, 334, 104, 760, 749, 620, 256, 932, 572, 613, 490, 509, 119, 405, 695, 49, 327, 719, 497, 824, 596, 649, 356, 184, 93, 245, 7, 306, 509, 754, 352, 665, 783, 738, 801, 690, 330, 337, 195, 656, 963, 11, 427, 42, 106, 968, 212, 1, 510, 480, 658, 571, 331, 814, 847, 564, 197, 625, 438, 931, 18, 487, 151, 187, 913, 179, 995, 750, 750, 913, 562, 134, 273, 547, 521, 830, 140, 557, 678, 726, 503, 597, 408, 893, 988, 238, 85, 93, 188, 720, 211, 746, 387, 710, 209, 887, 668, 103, 473, 900, 674, 105, 183, 952, 370, 787, 302, 410, 905, 110, 400, 996, 142, 585, 860, 47, 924, 731, 158, 386, 219, 400, 415, 55, 682, 874, 61, 6, 602, 268, 365, 470, 518, 723, 89, 106, 319, 130, 655, 732, 993, 974, 595, 810, 673, 55, 730, 95, 245, 705, 694, 948, 873, 353, 474, 760, 741, 756, 644, 143, 640, 737, 679, 135, 149, 529, 210, 607, 417, 255, 787, 373, 626, 445, 112, 172, 595, 153, 53, 183, 717, 655, 17, 176, 77, 776, 399, 654, 728, 2, 161, 455, 870, 316, 694, 381, 930, 480, 604, 386, 359, 207, 954, 79, 702, 365, 453, 732, 836, 432, 563, 17, 107, 583, 910, 467, 116, 546, 719, 528, 71, 107, 256, 520, 353, 528, 154, 430, 477, 48, 520, 204, 414, 810, 719, 925, 298, 131, 701, 709, 751, 22, 817, 652, 924, 695, 471, 153, 625, 978, 616, 142, 597, 88, 732, 917, 404, 743, 395, 749, 407, 936, 302, 767, 45, 563, 340, 398, 896, 51, 807, 767, 997, 978, 650, 809, 330, 360, 716, 161, 293, 209, 753, 98, 130, 634, 543, 889, 88, 31, 692, 401, 674, 294, 693, 165, 949, 765, 737, 458, 841, 48, 943, 229, 215, 389, 209, 388, 754, 243, 501, 271, 516, 564, 277, 912, 5, 611, 212, 782, 92, 123, 201, 324, 4, 437, 602, 804, 363, 391, 273, 575, 906, 759, 626, 896, 859, 763, 358, 577, 484, 747, 156, 948, 605, 454, 194, 359, 430, 323, 883, 24, 447, 202, 847, 876, 49, 792, 588, 304, 133, 558, 842, 414, 567, 728, 506, 391, 0, 992, 118, 398, 718, 868, 975, 579, 119, 363, 596, 379, 916, 466, 840, 232, 430, 414, 155, 571, 311, 179, 796, 300, 216, 903, 993, 55, 728, 481, 905, 29, 37, 897, 286, 657, 377, 682, 554, 506, 757, 529, 580, 641, 866, 852, 933, 660, 490, 616, 732, 606, 114, 185, 647, 227, 435, 58, 183, 110, 742, 374, 604, 671, 872, 605, 480, 671, 979, 717, 481, 680, 791, 775, 0, 46, 832, 468, 858, 226, 178, 666, 468, 254, 703, 463, 922, 511, 893, 648, 957, 831, 919, 512, 92, 232, 220, 223, 38, 609, 452, 522, 728, 976, 152, 517, 423, 402, 704, 936, 350, 35, 825, 128, 964, 426, 165, 775, 404, 164, 873, 258, 624, 821, 829, 777, 224, 226, 604, 451, 37, 838, 625, 379, 419, 575, 688, 897, 820, 78, 966, 797, 55, 674, 228, 402, 676, 279, 382, 976, 261, 327, 491, 282, 74, 761, 342, 697, 33, 805, 318, 875, 938, 320, 757, 439, 288, 771, 527, 856, 868, 64, 570, 479, 267, 338, 411, 206, 746, 278, 970, 810, 884, 142, 596, 208, 71, 168, 376, 7, 312, 948, 717, 357, 218, 854, 990, 853, 239, 449, 984, 711, 974, 821, 636, 328, 785, 493, 267, 243, 531, 954, 139, 983, 283, 684, 15, 596, 88, 534, 651, 422, 213, 889, 625, 885, 397, 576, 715, 849, 840, 513, 888, 422, 279, 582, 940, 866, 546, 800, 163, 922, 278, 45, 236, 757, 899, 185, 271, 817, 992, 432, 98, 131, 245, 184, 186, 635, 802, 704, 850, 577, 187, 95, 292, 778, 337, 287, 619, 515, 887, 57, 453, 553, 888, 583, 785, 175, 89, 809, 353, 595, 97, 569, 270, 168, 238, 198, 483, 144, 591, 100, 942, 353, 585, 902, 189, 145, 519, 90, 544, 669, 342, 760, 697, 700, 977, 125, 83, 778, 350, 703, 794, 680, 459, 956, 526, 520, 975, 296, 148, 917, 608, 326, 845, 282, 934, 466, 36, 645, 304, 643, 25, 255, 369, 259, 323, 879, 182, 707, 739, 356, 123, 918, 335, 97, 753, 808, 269, 334, 485, 120, 906, 214, 680, 70, 279, 762, 375, 271, 614, 744, 63, 326, 43, 875, 723, 57, 911, 418, 961, 472, 811, 766, 823, 839, 74, 510, 802, 322, 145, 922, 236, 833, 347, 734, 278, 311, 9, 613, 437, 817, 213, 150, 603, 69, 287, 491, 549, 55, 205, 629, 668, 629, 252, 811, 250, 970, 645, 391, 90, 774, 564, 17, 958, 353, 816, 174, 783, 716, 407, 8, 894, 256, 263, 290, 249, 895, 882, 906, 49, 23, 449, 853, 564, 739, 64, 802, 73, 643, 711, 59, 547, 169, 976, 152, 833, 404, 348, 89, 265, 510, 302, 997, 466, 822, 883, 128, 980, 845, 95, 717, 49, 419, 126, 729, 578, 536, 183, 574, 48, 38, 906, 313, 292, 891, 219, 790, 16, 548, 763, 517, 17, 941, 448, 98, 386, 222, 807, 225, 694, 424, 547, 483, 618, 47, 890, 438, 564, 895, 541, 77, 917, 232, 615, 610, 725, 385, 914, 171, 306, 653, 640, 398, 244, 209, 905, 123, 577, 280, 580, 368, 
158, 670, 396, 351, 943, 266, 838, 173, 731, 852, 34, 981, 862, 298, 201, 939, 998, 311, 884, 873, 258, 316, 143, 478, 674};
// array for y-values
int s= (sizeof(x)/sizeof(x[0])); 
// number of samples for array x
int c= (sizeof(y)/sizeof(y[0]));
// number of samples for array y 

double meanXValue = meanX(x, s);
double meanYValue = meanY(y, s);
double stdDevXValue = standardDeviationX(meanXValue, x, s);
double stdDevYValue = standardDeviationY(meanYValue, y, s);
int medianXValue = medianX(x, s);
int medianYValue = medianY(y, s);
double pearsonCoefficient = PC(y, x, meanXValue, meanYValue, s);
double tValue = t_value(s, c, stdDevXValue, stdDevYValue, meanXValue, meanYValue);

Serial.println(s);
Serial.println(c);
Serial.println("This is your mean value of x samples: ");
Serial.println(meanXValue);
Serial.println("This is your mean value of y samples: ");
Serial.println(meanYValue);
Serial.println("This is your standard deviation of x samples: ");
Serial.println(stdDevXValue);
Serial.println("This is your standard deviation of y samples: ");
Serial.println(stdDevYValue);
Serial.println("This is your median of x samples: ");
Serial.println(medianXValue);
Serial.println("This is your median of y samples: ");
Serial.println(medianYValue);
Serial.println("This is your pearson coefficient: ");
Serial.println(pearsonCoefficient);
Serial.println("This is your t-value: ");
Serial.println(tValue);


}


void loop(){


}












